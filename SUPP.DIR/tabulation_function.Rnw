\documentclass{article}
\usepackage{amsmath}
\usepackage{verbatim}
\usepackage{url}
\usepackage{pseudocode}

\usepackage{color}
\definecolor{darkblue}{rgb}{0,0,.75}
\usepackage{listings} %iclude code in your document

\lstloadlanguages{Matlab} %use listings with Matlab for Pseudocode
\lstnewenvironment{PseudoCode}[1][]
{\lstset{language=Matlab,basicstyle=\scriptsize, keywordstyle=\color{darkblue},xleftmargin=.04\textwidth,#1}}
{}


\begin{document}
\SweaveOpts{concordance=TRUE}
\title{BIOS 545 Spring 2017}
\author{Pittard}
\maketitle

\section{Tabulation}
Write a function called \textbf{mytable} that, given an input vector, produces the same output as would the \textbf{table} function that is built into R. This implies of course that you cannot use the actual \textbf{table} function or other existing counting or aggregation functions (e.g. \textbf{xtabs}) to solve this problem. Of course you can use the \textbf{table} function to verify that the output from your \textbf{mytable} function matches the output of \textbf{table}. 

\begin{verbatim}
mytable <- function(somevec) {
# A function to sort a numeric vector in ascending or descending order
# INPUT: "somevec" an unsorted numeric vector 
#
# OUTPUT: a named vector that presents the total number of times that each
#         unique value in the vector appears

   # Your code goes here
}
\end{verbatim}

<<echo=FALSE>>=
mytable <- function(somevec) {
  retvec <- vector()
  uniqvec <- sort(unique(somevec))
  for (ii in 1:length(uniqvec)) {
    retvec[ii] <- length(which(somevec==uniqvec[ii]))
  }
  names(retvec) <- uniqvec
  return(retvec)
}
@

<<>>=
# Let's try it on an example vector

set.seed(123)
somevec <- as.integer(runif(30,1,10))

mytable(somevec)
table(somevec)

# Let's try another example

set.seed(321)
somevec <- as.integer(runif(30,1,10))
#
mytable(somevec)
table(somevec)
@

Here is some general psuedocode:

\begin{PseudoCode}
Determine the unique values in the input vector somevec
Sort the resulting vector

  For each unique value determine how many times it appears in 
      the input vector somevec - use functions you've seen previously
     
  After processing each unique value assign names to the return 
    vector - the names and arrangement of your counts should match those 
       from the output of the table function
 Return a vector with your computed counts
\end{PseudoCode}



\end{document}